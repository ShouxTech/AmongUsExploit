#include <iostream>
#include <Windows.h>
#include "Memory.h"

constexpr int UNKNOWN_GLOBAL_OFFSET = 0x1BA9CE4;
constexpr int SPEED_OFFSET = 0x14;
constexpr int CREWMATE_VISION_OFFSET = 0x18;
constexpr int IMPOSTER_VISION_OFFSET = 0x1C;
constexpr int KILL_DISTANCE_OFFSET = 0x40;
constexpr int KILL_COOLDOWN_OFFSET = 0x20;

HANDLE handle;

int main() {
    std::uintptr_t processID = Memory::GetProcessID("Among Us.exe");
    if (!processID) {
        std::cout << "Couldn't get Among Us process ID.\n";
        system("pause");
        return 0;
    }

    handle = OpenProcess(PROCESS_ALL_ACCESS, false, processID);
    std::uintptr_t baseAddress = Memory::GetModuleBaseAddress(processID, "GameAssembly.dll");

    std::cout << "GameAssembly.dll base address: " << std::hex << baseAddress << std::dec << '\n';

    std::uintptr_t v8 = Memory::Read<std::uintptr_t>(baseAddress + UNKNOWN_GLOBAL_OFFSET);
    std::uintptr_t gameSettings = Memory::Read<std::uintptr_t>(Memory::Read<std::uintptr_t>(v8 + 92) + 4);

    std::cout << "Game settings address: " << std::hex << gameSettings << std::dec << '\n';
    std::cout << "Speed address: " << std::hex << gameSettings + SPEED_OFFSET << std::dec << '\n';
    std::cout << "Crewmate vision address: " << std::hex << gameSettings + CREWMATE_VISION_OFFSET << std::dec << '\n';
    std::cout << "Imposter vision address: " << std::hex << gameSettings + IMPOSTER_VISION_OFFSET << std::dec << '\n';
    std::cout << "Kill distance address: " << std::hex << gameSettings + KILL_DISTANCE_OFFSET << std::dec << '\n';
    std::cout << "Kill cooldown address: " << std::hex << gameSettings + KILL_COOLDOWN_OFFSET << std::dec << '\n';

    while (true) {
        Memory::Write<float>(gameSettings + SPEED_OFFSET, 8);
        Memory::Write<float>(gameSettings + CREWMATE_VISION_OFFSET, 100);
        Memory::Write<float>(gameSettings + IMPOSTER_VISION_OFFSET, 100);
        Memory::Write<float>(gameSettings + KILL_DISTANCE_OFFSET, 2); // 2 = Long, 1 = Medium, 0 = Short.
        Memory::Write<float>(gameSettings + KILL_COOLDOWN_OFFSET, 0.05);
        Sleep(250);
    }

    CloseHandle(handle);
}