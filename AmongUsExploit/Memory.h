#pragma once
#include <cstdint>

extern HANDLE handle;

namespace Memory {
	std::uintptr_t GetProcessID(const char* processName);
	std::uintptr_t GetModuleBaseAddress(std::uintptr_t processID, const char* moduleName);

	template<typename T>
	inline T Read(std::uintptr_t address, std::size_t size = sizeof(T)) {
		T buffer;
		ReadProcessMemory(handle, reinterpret_cast<LPCVOID>(address), &buffer, size, 0);
		return buffer;
	};

	template<typename T>
	inline void Write(std::uintptr_t address, T buffer, std::size_t size = sizeof(T)) {
		WriteProcessMemory(handle, reinterpret_cast<LPVOID>(address), &buffer, size, 0);
	};
};